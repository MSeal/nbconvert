"""Utility for calling pandoc"""
# Copyright (c) IPython Development Team.
# Distributed under the terms of the Modified BSD License.

from __future__ import print_function, absolute_import

import subprocess
import warnings
import re
import os
import shutil
from io import TextIOWrapper, BytesIO

from nbconvert.utils.version import check_version
from ipython_genutils.py3compat import cast_bytes, which
from ipython_genutils.path import link_or_copy, ensure_dir_exists
try:
    # Python 2
    from urllib import pathname2url, url2pathname
except ImportError:
    # Python 3
    from urllib.request import pathname2url, url2pathname

from .exceptions import ConversionException
from .io import sensitive_filename_cleanup

_minimal_version = "1.12.1"
_maximal_version = "3.0.0"


def pandoc(source, fmt, to, extra_args=None, encoding='utf-8',
           relative_path_replacement=None, build_path_replacement=None):
    """Convert an input string using pandoc.

    Pandoc converts an input string `from` a format `to` a target format.

    Parameters
    ----------
    source : string
      Input string, assumed to be valid format `from`.
    fmt : string
      The name of the input format (markdown, etc.)
    to : string
      The name of the output format (html, etc.)
    extra_args : list (optional)
      Extra Pandoc command arguments.
    relative_path_replacement : string (optional)
      The path to use in replacing relative paths.
    build_path_replacement : string (optional)
      A path to copy files into and reference in any image paths.

    Returns
    -------
    out : unicode
      Output as returned by pandoc.

    Raises
    ------
    PandocMissing
      If pandoc is not installed.

    Any error messages generated by pandoc are printed to stderr.

    """
    cmd = ['pandoc', '-f', fmt, '-t', to]
    if extra_args:
        cmd.extend(extra_args)

    # This will raise an exception that will pop us out of here
    check_pandoc_version()

    # For markdown formats we can manipulate image paths to correct for latex issues
    if 'markdown' in fmt:
        source = _replace_markdown_paths(
            source, relative_path_replacement, build_path_replacement)

    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    out, _ = p.communicate(cast_bytes(source, encoding))
    out = TextIOWrapper(BytesIO(out), encoding, 'replace').read()
    return out.rstrip('\n')


def get_pandoc_version():
    """Gets the Pandoc version if Pandoc is installed.

    If the minimal version is not met, it will probe Pandoc for its version, cache it and return that value.
    If the minimal version is met, it will return the cached version and stop probing Pandoc
    (unless :func:`clean_cache()` is called).

    Raises
    ------
    PandocMissing
      If pandoc is unavailable.
    """
    global __version

    if __version is None:
        if not which('pandoc'):
            raise PandocMissing()

        out = subprocess.check_output(['pandoc', '-v'])
        out_lines = out.splitlines()
        version_pattern = re.compile(r"^\d+(\.\d+){1,}$")
        for tok in out_lines[0].decode('ascii', 'replace').split():
            if version_pattern.match(tok):
                __version = tok
                break
    return __version


def check_pandoc_version():
    """Returns True if pandoc's version meets at least minimal version.

    Raises
    ------
    PandocMissing
      If pandoc is unavailable.
    """
    if check_pandoc_version._cached is not None:
        return check_pandoc_version._cached

    v = get_pandoc_version()
    if v is None:
        warnings.warn("Sorry, we cannot determine the version of pandoc.\n"
                      "Please consider reporting this issue and include the"
                      "output of pandoc --version.\nContinuing...",
                      RuntimeWarning, stacklevel=2)
        return False
    ok = check_version(v, _minimal_version, max_v=_maximal_version)
    check_pandoc_version._cached = ok
    if not ok:
        warnings.warn( "You are using an unsupported version of pandoc (%s).\n" % v +
                       "Your version must be at least (%s) " % _minimal_version +
                       "but less than (%s).\n" % _maximal_version +
                       "Refer to http://pandoc.org/installing.html.\nContinuing with doubts...",
                       RuntimeWarning, stacklevel=2)
    return ok


check_pandoc_version._cached = None


#-----------------------------------------------------------------------------
# Utilities
#-----------------------------------------------------------------------------
def _replace_markdown_paths(source, relative_path_replacement, build_path_replacement):
    """Returns source with relative image references prefixed by relative_path_replacement
    and with contents linked or copied to build_path_replacement.
    """

    # Building blocks for matching ![image](my_diagram.png) markdown
    img_open_group = r'(!\[(?:[iI]mage|[aA]lt [tT]ext|)\]\()'
    no_scheme_ahead = r'(?![^:\.]+:\/\/)'
    no_slash_match = r'[^\/]'
    wrapped_path_match = r'[^)\"]*'
    no_space_match = r'[^ ]'

    # The various regex groups we're matching for markdown image references
    img_local_path_group = (r'(' + no_scheme_ahead +
        wrapped_path_match + r'\.' + wrapped_path_match + no_space_match + r')')
    img_rel_path_group = (r'(' + no_scheme_ahead + no_slash_match +
        wrapped_path_match + r'\.' + wrapped_path_match + no_space_match + r')')
    # Pandoc ignores captions, but we don't want to mangle them when we do path adjustments
    maybe_caption_groups = r'( )?(\"[^)\"]+\")?'
    img_close_group = r'(\))'

    if relative_path_replacement:
        # We can't quote the path for xetex downstream if it has spaces in it
        # See https://tug.org/pipermail/xetex/2009-December/015313.html
        # However the will still render but will double render some path
        # characters alongside the image. To avoid this also use build_path_replacement.

        # => (!\[(?:[iI]mage|[aA]lt [tT]ext|)\]\()((?![^:\.]+:\/\/)[^\/][^)\"]*\.[^)\"]*[^ ])( )?(\"[^)\"]+\")?(\))
        source = re.sub(img_open_group + img_rel_path_group + maybe_caption_groups + img_close_group,
            lambda m: (
                m.group(1) + # ![image](
                os.path.join(pathname2url(relative_path_replacement), m.group(2)) +
                (m.group(3) or "") + # Maybe space
                (m.group(4) or "") + # Maybe caption
                m.group(5) # )
            ),
            source)

    if build_path_replacement:
        # If our file path may have non-alphanumeric characters, the only way
        # for latex targets to correctly parse the files is to rename them in
        # a alphanumeric path.

        # => (!\[(?:[iI]mage|[aA]lt [tT]ext|)\]\()((?![^:\.]+:\/\/)[^)\"]*\.[^)\"]*[^ ])( )?(\"[^)\"]+\")?(\))
        source = re.sub(img_open_group + img_local_path_group + maybe_caption_groups + img_close_group,
            lambda m: (
                m.group(1) + # ![image](
                _rename_and_copy_to_build_dir(url2pathname(m.group(2)), build_path_replacement) +
                (m.group(3) or "") + # Maybe space
                (m.group(4) or "") + # Maybe caption
                m.group(5) # )
            ),
            source)

    return source

def _rename_and_copy_to_build_dir(filename, build_path):
    """Copies filename to build_path with a latex safe file name"""
    ensure_dir_exists(build_path)
    link_or_copy(filename, build_path)
    new_file_path = os.path.join(build_path, os.path.basename(filename))
    # return new_file_path
    safe_file_path = os.path.join(build_path, sensitive_filename_cleanup(os.path.basename(filename)))
    os.rename(new_file_path, safe_file_path)
    return safe_file_path


#-----------------------------------------------------------------------------
# Exception handling
#-----------------------------------------------------------------------------
class PandocMissing(ConversionException):
    """Exception raised when Pandoc is missing."""
    def __init__(self, *args, **kwargs):
        super(PandocMissing, self).__init__( "Pandoc wasn't found.\n" +
                                             "Please check that pandoc is installed:\n" +
                                             "http://pandoc.org/installing.html" )

#-----------------------------------------------------------------------------
# Internal state management
#-----------------------------------------------------------------------------
def clean_cache():
    global __version
    __version = None

__version = None
